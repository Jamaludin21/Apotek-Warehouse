generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  MANAGER
  KEEPER
}

enum TransactionStatus {
  PENDING
  PAID
  FAILED
  CANCELLED
}

// =============================
// USER MODEL
// =============================
model User {
  id        String   @id @default(cuid())
  name      String?
  username  String   @unique
  email     String?  @unique
  password  String
  role      Role     @default(KEEPER)
  products  Product[]       @relation("ProductCreator")
  transactions Transaction[] @relation("TransactionCreator")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// =============================
// CATEGORY MODEL
// =============================
model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// =============================
// PRODUCT MODEL
// =============================
model Product {
  id          Int               @id @default(autoincrement())
  name        String
  description String?
  image       String?
  price       Float
  stock       Int               @default(0)
  categoryId  Int
  category    Category          @relation(fields: [categoryId], references: [id])
  createdById String
  createdBy   User              @relation("ProductCreator", fields: [createdById], references: [id])
  items       TransactionItem[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

// =============================
// TRANSACTION MODEL
// =============================
model Transaction {
  id           Int               @id @default(autoincrement())
  custName     String
  phone        String?
  status       TransactionStatus @default(PENDING)
  items        TransactionItem[]
  createdById  String
  createdBy    User              @relation("TransactionCreator", fields: [createdById], references: [id])
  createdAt    DateTime          @default(now())
}

// =============================
// TRANSACTION ITEM (Join Table)
// =============================
model TransactionItem {
  id            Int        @id @default(autoincrement())
  transactionId Int
  productId     Int
  quantity      Int
  unitPrice     Float       // Snapshot of the price at transaction time
  totalPrice    Float       // unitPrice * quantity

  transaction Transaction @relation(fields: [transactionId], references: [id])
  product     Product     @relation(fields: [productId], references: [id])

  @@unique([transactionId, productId]) // prevents duplicate products in same transaction
}
